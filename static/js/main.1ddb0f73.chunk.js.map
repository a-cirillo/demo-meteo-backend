{"version":3,"sources":["page/posts/posts.component.jsx","page/comment/comment.component.jsx","components/my-url-field/my-url-field.component.jsx","page/users/users.component.jsx","page/dashboard/dashboard.component.jsx","provider/auth-provider/auth-provider.component.jsx","App.js","serviceWorker.js","index.js"],"names":["PostTitle","record","title","PostFilter","props","Filter","TextInput","label","source","alwaysOn","ReferenceInput","reference","allowEmpty","SelectInput","optionText","PostList","isSmall","useMediaQuery","theme","breakpoints","down","List","filters","SimpleList","primaryText","secondaryText","views","tertiaryText","Date","published_at","toLocaleDateString","Datagrid","TextField","ReferenceField","EditButton","PostEdit","Edit","SimpleForm","disabled","multiline","PostCreate","Create","CommentFilter","CommentList","body","email","MyUrlField","href","className","UserList","rowClick","EmailField","Dashboard","Card","CardHeader","CardContent","login","username","localStorage","setItem","Promise","resolve","logout","removeItem","checkError","status","reject","checkAuth","getItem","getPermissions","dataProvider","jsonServerProvider","App","Admin","authProvider","dashboard","Resource","icon","PostIcon","name","list","edit","create","UserIcon","CommentIcon","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1ddb0f73.chunk.js","sourcesContent":["import React from 'react';\n// import { List, Datagrid, TextField, ReferenceField } from 'react-admin';\nimport { useMediaQuery } from '@material-ui/core';\nimport {\n    Filter,\n    List,\n    Datagrid,\n    TextField,\n    ReferenceField,\n    EditButton,\n    Edit,\n    SimpleForm,\n    ReferenceInput,\n    TextInput,\n    SelectInput,\n    Create,\n    SimpleList\n} from 'react-admin';\n\nconst PostTitle = ({ record }) => {\n return <span>Post {record ? `\"${record.title}\"` : ''}</span>;\n};\n\nconst PostFilter = (props) => (\n    <Filter {...props}>\n        <TextInput label=\"Search\" source=\"q\" alwaysOn />\n        <ReferenceInput label=\"User\" source=\"userId\" reference=\"users\" allowEmpty>\n            <SelectInput optionText=\"name\" />\n        </ReferenceInput>\n    </Filter>\n);\n\nexport const PostList = props => {\n    const isSmall = useMediaQuery(theme => theme.breakpoints.down('sm'));\n    return(\n        <List filters={<PostFilter/>} {...props}>\n            {isSmall ? (\n                <SimpleList\n                    primaryText={record => record.title}\n                    secondaryText={record => `${record.views} views`}\n                    tertiaryText={record => new Date(record.published_at).toLocaleDateString()}\n                />\n            ) : (\n                <Datagrid>\n                    <TextField source=\"id\" />\n                    <ReferenceField label=\"User\" source=\"userId\" reference=\"users\">\n                        <TextField source=\"name\" />\n                    </ReferenceField>\n                    <TextField source=\"title\" />\n                    <TextField source=\"body\" />\n                    <EditButton />\n                </Datagrid>\n            )}\n        </List>\n    )\n};\n\nexport const PostEdit = props => (\n    <Edit title={<PostTitle />} {...props}>\n        <SimpleForm>\n            <TextInput disabled source=\"id\" />\n            <ReferenceInput source=\"userId\" reference=\"users\">\n                <SelectInput optionText=\"name\" />\n            </ReferenceInput>\n            <TextInput source=\"title\" />\n            <TextInput multiline source=\"body\" />\n        </SimpleForm>\n    </Edit>\n);\n\nexport const PostCreate = props => (\n    <Create {...props}>\n        <SimpleForm>\n            <ReferenceInput source=\"userId\" reference=\"users\">\n                <SelectInput optionText=\"name\" />\n            </ReferenceInput>\n            <TextInput source=\"title\" />\n            <TextInput multiline source=\"body\" />\n        </SimpleForm>\n    </Create>\n);","import React from 'react';\n\nimport { useMediaQuery } from '@material-ui/core';\nimport {\n    Filter,\n    List,\n    Datagrid,\n    TextField,\n    ReferenceField,\n    EditButton,\n    Edit,\n    SimpleForm,\n    ReferenceInput,\n    TextInput,\n    SelectInput,\n    Create,\n    SimpleList\n} from 'react-admin';\n\nconst CommentFilter = (props) => (\n    <Filter {...props}>\n        <TextInput label=\"Search\" source=\"name\" alwaysOn />\n        <ReferenceInput label=\"Post\" source=\"postId\" reference=\"posts\" allowEmpty>\n            <SelectInput optionText=\"title\" />\n        </ReferenceInput>\n    </Filter>\n);\n\nexport const CommentList = props => {\n    const isSmall = useMediaQuery(theme => theme.breakpoints.down('sm'));\n    return(\n        <List filters={<CommentFilter/>} {...props}>\n            {isSmall ? (\n                <SimpleList\n                    primaryText={record => record.body}\n                    secondaryText={record => `${record.email} author`}\n                />\n            ) : (\n                <Datagrid>\n                    <TextField source=\"id\" />\n                    <ReferenceField label=\"Post\" source=\"postId\" reference=\"posts\">\n                        <TextField source=\"title\" />\n                    </ReferenceField>\n                    <TextField source=\"name\" />\n                    <TextField source=\"body\" />\n                    <TextField source=\"email\" />\n                    <EditButton />\n                </Datagrid>\n            )}\n        </List>\n    )\n};","import React from 'react';\nimport LaunchIcon from '@material-ui/icons/Launch';\n\nimport './my-url-field.styels.scss'\n\nconst MyUrlField = ({ record = {}, source }) =>\n    <a href={record[source]} className=\"link\">\n        {record[source]}\n        <LaunchIcon className='icon' />\n    </a>;\n\nexport default MyUrlField;","import React from 'react';\nimport { List, Datagrid, TextField, EmailField } from 'react-admin';\nimport MyUrlField from '../../components/my-url-field/my-url-field.component';\n\nexport const UserList = props => (\n    <List {...props}>\n        <Datagrid rowClick=\"edit\">\n            <TextField source=\"id\" />\n            <TextField source=\"name\" />\n            <TextField source=\"username\" />\n            <EmailField source=\"email\" />\n            <TextField source=\"address.street\" />\n            <TextField source=\"phone\" />\n            <MyUrlField source=\"website\" />\n            <TextField source=\"company.name\" />\n        </Datagrid>\n    </List>\n);","import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\n\nexport const Dashboard = () => (\n    <Card>\n        <CardHeader title=\"Welcome to the administration\" />\n        <CardContent>Lorem ipsum sic dolor amet...</CardContent>\n    </Card>\n);\n","export default {\n    // called when the user attempts to log in\n    login: ({ username }) => {\n        localStorage.setItem('username', username);\n        // accept all username/password combinations\n        return Promise.resolve();\n    },\n    // called when the user clicks on the logout button\n    logout: () => {\n        localStorage.removeItem('username');\n        return Promise.resolve();\n    },\n    // called when the API returns an error\n    checkError: ({ status }) => {\n        if (status === 401 || status === 403) {\n            localStorage.removeItem('username');\n            return Promise.reject();\n        }\n        return Promise.resolve();\n    },\n    // called when the user navigates to a new location, to check for authentication\n    checkAuth: () => {\n        return localStorage.getItem('username')\n            ? Promise.resolve()\n            : Promise.reject();\n    },\n    // called when the user navigates to a new location, to check for permissions / roles\n    getPermissions: () => Promise.resolve(),\n};","import React from 'react';\n// import { Admin } from 'react-admin';\nimport { Admin, Resource} from 'react-admin';\nimport { PostList, PostEdit, PostCreate } from './page/posts/posts.component';\nimport { CommentList } from './page/comment/comment.component';\nimport { UserList } from './page/users/users.component';\nimport { Dashboard } from './page/dashboard/dashboard.component';\n\nimport authProvider from './provider/auth-provider/auth-provider.component';\nimport jsonServerProvider from 'ra-data-json-server';\n\nimport PostIcon from '@material-ui/icons/Book';\nimport UserIcon from '@material-ui/icons/Group';\nimport CommentIcon from '@material-ui/icons/Comment';\n\nconst dataProvider = jsonServerProvider('https://jsonplaceholder.typicode.com');\n// const App = () => <Admin dataProvider={dataProvider} />;\nconst App = () => (\n    <Admin authProvider={authProvider} dashboard={Dashboard} dataProvider={dataProvider}>\n      <Resource icon={PostIcon} name=\"posts\" list={PostList} edit={PostEdit} create={PostCreate}/>\n      <Resource icon={UserIcon} name=\"users\" list={UserList} />\n      <Resource icon={CommentIcon} name=\"comments\" list={CommentList} />\n    </Admin>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}